// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/edo.proto

package edocontroller

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EdoServiceClient is the client API for EdoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EdoServiceClient interface {
	AddDevice(ctx context.Context, in *AddDeviceRequest, opts ...grpc.CallOption) (*AddDeviceResponse, error)
	GetDevices(ctx context.Context, in *GetDevicesRequest, opts ...grpc.CallOption) (*GetDevicesResponse, error)
	Controller(ctx context.Context, in *ControlleRequest, opts ...grpc.CallOption) (*ControlleResponse, error)
	ExController(ctx context.Context, opts ...grpc.CallOption) (EdoService_ExControllerClient, error)
}

type edoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEdoServiceClient(cc grpc.ClientConnInterface) EdoServiceClient {
	return &edoServiceClient{cc}
}

func (c *edoServiceClient) AddDevice(ctx context.Context, in *AddDeviceRequest, opts ...grpc.CallOption) (*AddDeviceResponse, error) {
	out := new(AddDeviceResponse)
	err := c.cc.Invoke(ctx, "/edocontroller.EdoService/AddDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edoServiceClient) GetDevices(ctx context.Context, in *GetDevicesRequest, opts ...grpc.CallOption) (*GetDevicesResponse, error) {
	out := new(GetDevicesResponse)
	err := c.cc.Invoke(ctx, "/edocontroller.EdoService/GetDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edoServiceClient) Controller(ctx context.Context, in *ControlleRequest, opts ...grpc.CallOption) (*ControlleResponse, error) {
	out := new(ControlleResponse)
	err := c.cc.Invoke(ctx, "/edocontroller.EdoService/Controller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edoServiceClient) ExController(ctx context.Context, opts ...grpc.CallOption) (EdoService_ExControllerClient, error) {
	stream, err := c.cc.NewStream(ctx, &EdoService_ServiceDesc.Streams[0], "/edocontroller.EdoService/ExController", opts...)
	if err != nil {
		return nil, err
	}
	x := &edoServiceExControllerClient{stream}
	return x, nil
}

type EdoService_ExControllerClient interface {
	Send(*ExControllerResponse) error
	Recv() (*ExControllerRequest, error)
	grpc.ClientStream
}

type edoServiceExControllerClient struct {
	grpc.ClientStream
}

func (x *edoServiceExControllerClient) Send(m *ExControllerResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *edoServiceExControllerClient) Recv() (*ExControllerRequest, error) {
	m := new(ExControllerRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EdoServiceServer is the server API for EdoService service.
// All implementations must embed UnimplementedEdoServiceServer
// for forward compatibility
type EdoServiceServer interface {
	AddDevice(context.Context, *AddDeviceRequest) (*AddDeviceResponse, error)
	GetDevices(context.Context, *GetDevicesRequest) (*GetDevicesResponse, error)
	Controller(context.Context, *ControlleRequest) (*ControlleResponse, error)
	ExController(EdoService_ExControllerServer) error
	mustEmbedUnimplementedEdoServiceServer()
}

// UnimplementedEdoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEdoServiceServer struct {
}

func (UnimplementedEdoServiceServer) AddDevice(context.Context, *AddDeviceRequest) (*AddDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDevice not implemented")
}
func (UnimplementedEdoServiceServer) GetDevices(context.Context, *GetDevicesRequest) (*GetDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevices not implemented")
}
func (UnimplementedEdoServiceServer) Controller(context.Context, *ControlleRequest) (*ControlleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Controller not implemented")
}
func (UnimplementedEdoServiceServer) ExController(EdoService_ExControllerServer) error {
	return status.Errorf(codes.Unimplemented, "method ExController not implemented")
}
func (UnimplementedEdoServiceServer) mustEmbedUnimplementedEdoServiceServer() {}

// UnsafeEdoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EdoServiceServer will
// result in compilation errors.
type UnsafeEdoServiceServer interface {
	mustEmbedUnimplementedEdoServiceServer()
}

func RegisterEdoServiceServer(s grpc.ServiceRegistrar, srv EdoServiceServer) {
	s.RegisterService(&EdoService_ServiceDesc, srv)
}

func _EdoService_AddDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdoServiceServer).AddDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edocontroller.EdoService/AddDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdoServiceServer).AddDevice(ctx, req.(*AddDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdoService_GetDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdoServiceServer).GetDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edocontroller.EdoService/GetDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdoServiceServer).GetDevices(ctx, req.(*GetDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdoService_Controller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdoServiceServer).Controller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/edocontroller.EdoService/Controller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdoServiceServer).Controller(ctx, req.(*ControlleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdoService_ExController_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EdoServiceServer).ExController(&edoServiceExControllerServer{stream})
}

type EdoService_ExControllerServer interface {
	Send(*ExControllerRequest) error
	Recv() (*ExControllerResponse, error)
	grpc.ServerStream
}

type edoServiceExControllerServer struct {
	grpc.ServerStream
}

func (x *edoServiceExControllerServer) Send(m *ExControllerRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *edoServiceExControllerServer) Recv() (*ExControllerResponse, error) {
	m := new(ExControllerResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EdoService_ServiceDesc is the grpc.ServiceDesc for EdoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EdoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "edocontroller.EdoService",
	HandlerType: (*EdoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDevice",
			Handler:    _EdoService_AddDevice_Handler,
		},
		{
			MethodName: "GetDevices",
			Handler:    _EdoService_GetDevices_Handler,
		},
		{
			MethodName: "Controller",
			Handler:    _EdoService_Controller_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExController",
			Handler:       _EdoService_ExController_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/edo.proto",
}
